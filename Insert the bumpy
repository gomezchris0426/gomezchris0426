#define Memory Model for laptop
class NeuralNetModel(nn.Module):
def _init_(self, vocab_size, embedding_dim, hidden_dim, seq_length):
super(NeuralNetModel, self)._init_()
self.embedding = nn.Embedding(vocab_size, embedding_dim)
self.embedding = nn.LSTM(embedding_dim, hidden_dim)
self.fc = nn.Linear(hidden_dim, vocab_size)
self.seq_length = seq_length
#embed network layers
def forward(self, x):
embedded = self embedding(x)
lstm out, (h_n, c_n) = self.lstm(embedded)
out = self.fc(lstm_out[:, -1, :])
return out
#define tensors
class TextDataSet(DataSet):
def_init_(self, text, tokenizer, seq_length=30:
self.tokenizer = tokenizer
self.seq_length = seq.length

#Tokenize the entire text into a list of words
self.tokens = tokenizer(text)

#Create i/o pairs, where Y is the next word
self.data = []
for i in range(len(self.tokens) - self.seq_ length):
X = self.tokens[i:i+self.seq_length]
Y=self.tokens[i+self.seq_length]
self.data.append((X,Y))
def_len_(self):
return len(self.data)
def_getitem_(self, idx):
X, Y = self.data[idx]
return torch.tensor(X), torch.tensor(Y)
